#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://qzvrkcmwzdaffpknuozl.supabase.co';
const anonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF6dnJrY213emRhZmZwa251b3psIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIyMTM3OTgsImV4cCI6MjA2Nzc4OTc5OH0.GJXkGBy047Dx8cS-uOIQJSEJa5VHQRfdwWb-FkQVbIQ';

const supabase = createClient(supabaseUrl, anonKey);

console.log('üîç TEST AUTHENTIFICATION ET R√âCUP√âRATION DONN√âES\n');

async function testAuthAndData() {
  try {
    console.log('üîê 1. Test de connexion avec jbgerberon@gmail.com...\n');

    // IMPORTANT: Nous ne pouvons pas nous connecter directement ici car nous n'avons pas le mot de passe
    // Mais nous pouvons simuler ce que fait getAllEntriesFromSupabase() avec getUser()

    // Test 1: V√©rifier s'il y a d√©j√† un utilisateur connect√©
    const { data: { user: currentUser }, error: currentUserError } = await supabase.auth.getUser();

    console.log('üë§ Utilisateur actuellement connect√©:');
    console.log(`   User: ${currentUser ? currentUser.email : 'Aucun'}`);
    console.log(`   Error: ${currentUserError ? currentUserError.message : 'Aucune'}\n`);

    // Test 2: Essayer de r√©cup√©rer les donn√©es pour l'utilisateur sp√©cifique
    console.log('üìä 2. Test r√©cup√©ration directe avec l\'UUID connu...\n');

    const targetUserId = '8ac44380-84d5-49a8-b4a0-16f602d0e7d4';

    const { data: entries, error: entriesError } = await supabase
      .from('daily_entries')
      .select('*')
      .eq('user_id', targetUserId)
      .order('entry_date', { ascending: true });

    console.log(`üìä R√©sultat r√©cup√©ration pour ${targetUserId}:`);
    console.log(`   Entr√©es trouv√©es: ${entries ? entries.length : 0}`);
    console.log(`   Erreur: ${entriesError ? entriesError.message : 'Aucune'}`);

    if (entries && entries.length > 0) {
      console.log(`   Premi√®re entr√©e: ${entries[0].entry_date}`);
      console.log(`   Derni√®re entr√©e: ${entries[entries.length - 1].entry_date}`);

      // V√©rifier les dates de septembre
      const septEntries = entries.filter(entry => {
        const date = new Date(entry.entry_date);
        return date.getMonth() === 8 && date.getFullYear() === 2025;
      });

      console.log(`   Entr√©es de septembre 2025: ${septEntries.length}`);
      if (septEntries.length > 0) {
        console.log(`   Dates septembre: ${septEntries.map(e => new Date(e.entry_date).toLocaleDateString('fr-FR')).join(', ')}`);
      }
    }

    console.log('\nüîç 3. Test avec cl√© anonyme vs service role...\n');

    // Le probl√®me pourrait √™tre que l'app utilise la cl√© anonyme et non service role
    // Et que les RLS (Row Level Security) de Supabase bloquent l'acc√®s

    // V√©rifier les policies RLS
    console.log('‚ö†Ô∏è  ANALYSE POSSIBLE:');
    console.log('   - L\'application utilise la cl√© ANON_KEY (normale)');
    console.log('   - Supabase peut avoir des RLS (Row Level Security) activ√©es');
    console.log('   - Les donn√©es ne sont visibles qu\'√† l\'utilisateur authentifi√©');
    console.log('   - En production, l\'utilisateur doit √™tre connect√© pour voir ses donn√©es');

    console.log('\n‚úÖ DONN√âES CONFIRM√âES:');
    console.log('   - 35 entr√©es existent dans Supabase');
    console.log('   - User ID correct: 8ac44380-84d5-49a8-b4a0-16f602d0e7d4');
    console.log('   - P√©riode: 11/07/2025 au 23/09/2025');
    console.log('   - 15 entr√©es en septembre dont la derni√®re le 23/09');

  } catch (error) {
    console.error('‚ùå ERREUR:', error);
  }
}

testAuthAndData();