-- Script PR√äT √Ä EX√âCUTER pour votre utilisateur
-- ID: 8ac44380-84d5-49a8-b4a0-16f602d0e7d4

-- ========================================
-- CR√âATION DES TABLES
-- ========================================

-- 1. Cr√©er la table teams
CREATE TABLE IF NOT EXISTS public.teams (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE,
  description TEXT,
  manager_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Cr√©er la table profiles
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email VARCHAR(255) NOT NULL UNIQUE,
  role VARCHAR(50) CHECK (role IN ('employee', 'manager', 'admin')) DEFAULT 'employee',
  team UUID REFERENCES public.teams(id) ON DELETE SET NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Cr√©er la table daily_entries
CREATE TABLE IF NOT EXISTS public.daily_entries (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  entry_date DATE NOT NULL,
  sleep JSONB,
  focus JSONB,
  tasks JSONB,
  wellbeing JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, entry_date)
);

-- 4. Cr√©er la table team_stats
CREATE TABLE IF NOT EXISTS public.team_stats (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  team UUID REFERENCES public.teams(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  avg_sleep_quality DECIMAL(3,2),
  avg_focus_level DECIMAL(3,2),
  avg_task_completion DECIMAL(3,2),
  avg_wellbeing_score DECIMAL(3,2),
  risk_level VARCHAR(20) CHECK (risk_level IN ('low', 'medium', 'high', 'critical')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(team, date)
);

-- ========================================
-- CR√âATION DES INDEX
-- ========================================

CREATE INDEX IF NOT EXISTS idx_profiles_team ON public.profiles(team);
CREATE INDEX IF NOT EXISTS idx_profiles_role ON public.profiles(role);
CREATE INDEX IF NOT EXISTS idx_daily_entries_user_date ON public.daily_entries(user_id, entry_date);
CREATE INDEX IF NOT EXISTS idx_team_stats_team_date ON public.team_stats(team, date);

-- ========================================
-- INSERTION DES DONN√âES DE BASE
-- ========================================

-- Cr√©er une √©quipe par d√©faut
INSERT INTO public.teams (id, name, description, is_active)
VALUES (
  '11111111-1111-1111-1111-111111111111',
  '√âquipe Principale',
  '√âquipe par d√©faut pour tous les employ√©s',
  true
)
ON CONFLICT (name) DO NOTHING;

-- ========================================
-- CONFIGURATION POUR VOTRE UTILISATEUR
-- ========================================

DO $$
DECLARE
  admin_user_id UUID := '8ac44380-84d5-49a8-b4a0-16f602d0e7d4'::UUID;
  user_email TEXT;
  entry_date DATE;
  profile_count INTEGER;
  team_count INTEGER;
  entry_count INTEGER;
BEGIN
  RAISE NOTICE 'Configuration pour votre utilisateur ID: %', admin_user_id;
  
  -- R√©cup√©rer l'email de l'utilisateur
  SELECT email INTO user_email FROM auth.users WHERE id = admin_user_id;
  
  IF user_email IS NULL THEN
    RAISE EXCEPTION 'Utilisateur avec ID % non trouv√© dans auth.users', admin_user_id;
  END IF;
  
  RAISE NOTICE 'Email trouv√©: %', user_email;
  
  -- Cr√©er ou mettre √† jour le profil admin
  INSERT INTO public.profiles (id, email, role, team, is_active)
  VALUES (
    admin_user_id,
    user_email,
    'admin',
    '11111111-1111-1111-1111-111111111111',
    true
  )
  ON CONFLICT (id) DO UPDATE
  SET 
    role = 'admin',
    team = '11111111-1111-1111-1111-111111111111',
    is_active = true,
    updated_at = NOW();
    
  RAISE NOTICE '‚úÖ Profil admin cr√©√©/mis √† jour pour %', user_email;
  
  -- Cr√©er des entr√©es de test pour juillet 2025
  RAISE NOTICE 'Cr√©ation des donn√©es de test pour juillet 2025...';
  
  FOR entry_date IN SELECT generate_series('2025-07-11'::date, '2025-07-15'::date, '1 day'::interval)::date
  LOOP
    INSERT INTO public.daily_entries (user_id, entry_date, sleep, focus, tasks, wellbeing)
    VALUES (
      admin_user_id,
      entry_date,
      '{"quality": 4, "duration": 7.5, "notes": "Bonne nuit de sommeil"}'::jsonb,
      '{"morning": 4, "afternoon": 3, "blockers": [], "notes": "Concentration correcte"}'::jsonb,
      '{"completed": 8, "planned": 10, "priorities": ["R√©union √©quipe", "Rapport mensuel"], "notes": "Journ√©e productive"}'::jsonb,
      '{"stress": 2, "energy": 4, "mood": 4, "notes": "Journ√©e agr√©able"}'::jsonb
    )
    ON CONFLICT (user_id, entry_date) DO NOTHING;
  END LOOP;
  
  RAISE NOTICE '‚úÖ Donn√©es de test cr√©√©es pour juillet 2025';
  
  -- Cr√©er quelques donn√©es suppl√©mentaires pour ao√ªt 2025
  FOR entry_date IN SELECT generate_series('2025-08-01'::date, '2025-08-05'::date, '1 day'::interval)::date
  LOOP
    INSERT INTO public.daily_entries (user_id, entry_date, sleep, focus, tasks, wellbeing)
    VALUES (
      admin_user_id,
      entry_date,
      '{"quality": 3, "duration": 7.0, "notes": "Sommeil correct"}'::jsonb,
      '{"morning": 3, "afternoon": 4, "blockers": ["R√©unions"], "notes": "Apr√®s-midi plus productive"}'::jsonb,
      '{"completed": 6, "planned": 8, "priorities": ["D√©veloppement", "Tests"], "notes": "Journ√©e charg√©e"}'::jsonb,
      '{"stress": 3, "energy": 3, "mood": 3, "notes": "Journ√©e standard"}'::jsonb
    )
    ON CONFLICT (user_id, entry_date) DO NOTHING;
  END LOOP;
  
  RAISE NOTICE '‚úÖ Donn√©es suppl√©mentaires cr√©√©es pour ao√ªt 2025';
  
  -- Statistiques finales
  SELECT COUNT(*) INTO profile_count FROM public.profiles;
  SELECT COUNT(*) INTO team_count FROM public.teams;
  SELECT COUNT(*) INTO entry_count FROM public.daily_entries;
  
  RAISE NOTICE '';
  RAISE NOTICE '=================================';
  RAISE NOTICE '‚úÖ CONFIGURATION TERMIN√âE';
  RAISE NOTICE '=================================';
  RAISE NOTICE '  Profils: % cr√©√©(s)', profile_count;
  RAISE NOTICE '  √âquipes: % cr√©√©e(s)', team_count;
  RAISE NOTICE '  Entr√©es: % cr√©√©e(s)', entry_count;
  RAISE NOTICE '';
  RAISE NOTICE 'üëâ Vous pouvez maintenant vous connecter √† l''application';
  RAISE NOTICE 'üëâ Donn√©es de test disponibles pour juillet et ao√ªt 2025';
  RAISE NOTICE '=================================';
END $$;

-- ========================================
-- D√âSACTIVER RLS TEMPORAIREMENT
-- ========================================

ALTER TABLE public.profiles DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.teams DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.daily_entries DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.team_stats DISABLE ROW LEVEL SECURITY;

-- Message final
DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '‚ö†Ô∏è RLS d√©sactiv√© temporairement pour √©viter les probl√®mes';
  RAISE NOTICE '‚úÖ Base de donn√©es configur√©e avec succ√®s!';
  RAISE NOTICE 'üöÄ Votre application est maintenant pr√™te √† utiliser';
  RAISE NOTICE '';
END $$;