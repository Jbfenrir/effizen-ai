const { spawn } = require('child_process');
const fs = require('fs');

console.log('üß™ TEST FINAL: V√©rification compl√®te du probl√®me r√©solu');

// V√©rifier que les fichiers conflictuels ont bien √©t√© supprim√©s
const deletedFiles = [
  'src/services/supabase-bypass.ts',
  'src/services/debug-auth.ts',
  'src/services/supabase-clean.ts'
];

console.log('üîç V√©rification suppression fichiers conflictuels...');
deletedFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚ùå ERREUR: ${file} existe encore !`);
    process.exit(1);
  } else {
    console.log(`‚úÖ Supprim√©: ${file}`);
  }
});

// V√©rifier que le service unifi√© existe
if (!fs.existsSync('src/services/supabase.ts')) {
  console.log('‚ùå ERREUR: Service unifi√© src/services/supabase.ts manquant !');
  process.exit(1);
}
console.log('‚úÖ Service unifi√© pr√©sent: src/services/supabase.ts');

// V√©rifier le contenu du service unifi√©
const supabaseContent = fs.readFileSync('src/services/supabase.ts', 'utf8');
if (supabaseContent.includes('GLOBAL_SUPABASE_KEY') && 
    supabaseContent.includes('getSupabaseClient') &&
    supabaseContent.includes('authService')) {
  console.log('‚úÖ Service unifi√© contient le singleton global');
} else {
  console.log('‚ùå ERREUR: Service unifi√© incomplet !');
  process.exit(1);
}

// V√©rifier les imports corrig√©s
const filesToCheck = [
  'src/hooks/useAuth.ts',
  'src/services/adminService.ts',
  'src/pages/AuthCallback.tsx'
];

console.log('üîç V√©rification imports corrig√©s...');
filesToCheck.forEach(file => {
  if (fs.existsSync(file)) {
    const content = fs.readFileSync(file, 'utf8');
    if (content.includes('supabase-bypass') || content.includes('debug-auth')) {
      console.log(`‚ùå ERREUR: ${file} contient encore des imports vers services supprim√©s !`);
      process.exit(1);
    } else if (content.includes("from '../services/supabase'")) {
      console.log(`‚úÖ Import corrig√©: ${file}`);
    }
  }
});

// Test du build
console.log('üèóÔ∏è Test du build...');
const buildProcess = spawn('npm', ['run', 'build'], { stdio: 'inherit' });

buildProcess.on('close', (buildCode) => {
  if (buildCode !== 0) {
    console.log('‚ùå √âCHEC: Build failed');
    process.exit(1);
  }
  
  console.log('‚úÖ Build r√©ussi');
  
  // V√©rifier que le build ne contient pas les anciens services
  const buildFiles = fs.readdirSync('dist/assets');
  let foundOldServices = false;
  
  buildFiles.forEach(file => {
    if (file.endsWith('.js')) {
      const content = fs.readFileSync(`dist/assets/${file}`, 'utf8');
      if (content.includes('supabase-bypass') || content.includes('debug-auth')) {
        console.log(`‚ùå ATTENTION: ${file} contient encore des r√©f√©rences aux anciens services`);
        foundOldServices = true;
      }
    }
  });
  
  if (!foundOldServices) {
    console.log('‚úÖ Build ne contient plus les anciens services');
  }
  
  console.log('');
  console.log('üéâ TESTS TECHNIQUES R√âUSSIS !');
  console.log('');
  console.log('‚ö†Ô∏è  IMPORTANT: Tests automatis√©s incomplets');
  console.log('   Les points suivants n√©cessitent un test manuel :');
  console.log('   1. Lancer l\'application avec "npm run dev"');
  console.log('   2. Se connecter avec jbgerberon@gmail.com');
  console.log('   3. Changer d\'onglet et revenir');
  console.log('   4. V√©rifier console (F12) : plus d\'erreur "Multiple GoTrueClient instances"');
  console.log('   5. V√©rifier : pas de boucle infinie de chargement');
  console.log('');
  console.log('‚úÖ Architecture unifi√©e confirm√©e techniquement');
});