#!/usr/bin/env node

const fs = require('fs');
const http = require('http');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function checkLocalhost(port = 3000) {
  return new Promise((resolve) => {
    const options = {
      hostname: 'localhost',
      port: port,
      path: '/',
      method: 'GET',
      timeout: 3000,
    };

    const req = http.request(options, (res) => {
      resolve(res.statusCode === 200 || res.statusCode === 304);
    });

    req.on('error', () => resolve(false));
    req.on('timeout', () => {
      req.destroy();
      resolve(false);
    });

    req.end();
  });
}

// V√©rifier les modifications critiques
async function verifyFixes() {
  console.log(`\n${colors.yellow}V√©rification des corrections appliqu√©es${colors.reset}`);
  
  const fixes = [
    {
      file: './src/services/supabase-bypass.ts',
      name: 'Singleton global window-based',
      checks: [
        { desc: 'GLOBAL_SUPABASE_KEY d√©fini', pattern: /__effizen_supabase_client__/ },
        { desc: 'V√©rification window existant', pattern: /window.*&&.*window.*GLOBAL_SUPABASE_KEY/ },
        { desc: 'Stockage dans window', pattern: /\(\s*window\s+as\s+any\s*\)\s*\[\s*GLOBAL_SUPABASE_KEY\s*\]\s*=\s*client/ },
        { desc: 'Message anti-HMR', pattern: /anti-HMR/ }
      ]
    },
    {
      file: './src/hooks/useAuth.ts',
      name: 'D√©tection session rapide',
      checks: [
        { desc: 'Fonction quickSessionCheck', pattern: /const quickSessionCheck = / },
        { desc: 'V√©rification localStorage au d√©marrage', pattern: /Session valide d√©tect√©e au d√©marrage/ },
        { desc: 'Timeouts r√©duits', pattern: /now - globalLastCheckTime > 2000/ },
        { desc: 'Protection expires_at', pattern: /sessionData\.expires_at.*> Date\.now/ }
      ]
    }
  ];

  let allPassed = true;

  for (const fix of fixes) {
    console.log(`\n  ${colors.cyan}${fix.name}${colors.reset}`);
    
    try {
      const content = fs.readFileSync(fix.file, 'utf8');
      
      for (const check of fix.checks) {
        if (check.pattern.test(content)) {
          console.log(`    ${colors.green}‚úì ${check.desc}${colors.reset}`);
        } else {
          console.log(`    ${colors.red}‚úó ${check.desc}${colors.reset}`);
          allPassed = false;
        }
      }
    } catch (error) {
      console.log(`    ${colors.red}‚úó Erreur lecture: ${error.message}${colors.reset}`);
      allPassed = false;
    }
  }

  return allPassed;
}

// Test du build
async function testBuild() {
  console.log(`\n${colors.yellow}Test du build de production${colors.reset}`);
  
  try {
    console.log(`  ${colors.blue}Compilation...${colors.reset}`);
    await execPromise('npm run build', { timeout: 60000 });
    
    if (fs.existsSync('./dist/index.html')) {
      console.log(`  ${colors.green}‚úì Build r√©ussi${colors.reset}`);
      return true;
    } else {
      console.log(`  ${colors.red}‚úó Fichiers dist manquants${colors.reset}`);
      return false;
    }
  } catch (error) {
    console.log(`  ${colors.red}‚úó Erreur build: ${error.message}${colors.reset}`);
    return false;
  }
}

// Test de persistance de session
async function testSessionPersistence() {
  console.log(`\n${colors.yellow}Test de persistance de session${colors.reset}`);
  
  try {
    // Premi√®re requ√™te
    const response1 = await fetch('http://localhost:3000/');
    console.log(`  ${colors.blue}Premi√®re requ√™te: ${response1.status}${colors.reset}`);
    
    // Simuler d√©lai changement onglet
    await sleep(2000);
    
    // Deuxi√®me requ√™te
    const response2 = await fetch('http://localhost:3000/');
    console.log(`  ${colors.blue}Deuxi√®me requ√™te: ${response2.status}${colors.reset}`);
    
    if (response1.ok && response2.ok) {
      console.log(`  ${colors.green}‚úì Application stable apr√®s d√©lai${colors.reset}`);
      return true;
    }
  } catch (error) {
    console.log(`  ${colors.red}‚úó Erreur test: ${error.message}${colors.reset}`);
  }
  
  return false;
}

// Cr√©er un script de test HTML pour test manuel
async function createManualTestPage() {
  const testPageContent = `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Manuel - Bug Changement Onglet</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 20px auto; padding: 20px; }
        .step { margin: 15px 0; padding: 15px; border: 1px solid #ddd; border-radius: 8px; }
        .step h3 { color: #2563eb; margin-top: 0; }
        .success { background: #f0f9ff; border-color: #38bdf8; }
        .warning { background: #fffbeb; border-color: #fbbf24; }
        .error { background: #fef2f2; border-color: #f87171; }
        .code { background: #f8f9fa; padding: 8px; border-radius: 4px; font-family: monospace; }
        .button { 
            display: inline-block; padding: 10px 20px; margin: 5px;
            background: #2563eb; color: white; text-decoration: none;
            border-radius: 6px; border: none; cursor: pointer;
        }
        .button:hover { background: #1d4ed8; }
    </style>
</head>
<body>
    <h1>üß™ Test Manuel - Correction Bug Changement d'Onglet</h1>
    
    <div class="step success">
        <h3>‚úÖ Corrections Appliqu√©es</h3>
        <ul>
            <li><strong>Singleton Global</strong> : Client Supabase unique attach√© √† window (survit au HMR)</li>
            <li><strong>D√©tection Session Rapide</strong> : V√©rification localStorage au d√©marrage</li>
            <li><strong>Timeouts Optimis√©s</strong> : R√©duction des d√©lais de 5s ‚Üí 2s</li>
            <li><strong>Gestion d'Erreur</strong> : Meilleure gestion des sessions expir√©es</li>
        </ul>
    </div>

    <div class="step warning">
        <h3>üîç Proc√©dure de Test</h3>
        <ol>
            <li><strong>Ouvrir l'application</strong> : <a href="http://localhost:3000" target="_blank" class="button">Ouvrir App</a></li>
            <li><strong>Observer</strong> : Y a-t-il encore une page de chargement infini au d√©marrage ?</li>
            <li><strong>Se connecter</strong> : Utiliser le bouton "Forcer la connexion" si n√©cessaire</li>
            <li><strong>V√©rifier la console</strong> : Messages "Multiple GoTrueClient" r√©duits ?</li>
            <li><strong>Test changement onglet</strong> :
                <ul>
                    <li>Une fois connect√© sur le dashboard</li>
                    <li>Changer d'onglet pendant 5-10 secondes</li>
                    <li>Revenir sur l'onglet de l'app</li>
                    <li>Observer : Page de chargement infini ? D√©connexion ?</li>
                </ul>
            </li>
        </ol>
    </div>

    <div class="step">
        <h3>üîß Debug Console</h3>
        <p>Commandes √† tester dans la console (F12) :</p>
        <div class="code">localStorage.getItem('supabase.auth.token.local.3000')</div>
        <div class="code">sessionStorage.getItem('effizen_auth_cache')</div>
        <div class="code">window.__effizen_supabase_client__ // Doit exister</div>
        <div class="code">window.globalCheckInProgress // Doit √™tre false</div>
    </div>

    <div class="step error">
        <h3>üö® Si le Probl√®me Persiste</h3>
        <ul>
            <li><strong>Vider le cache</strong> : Ctrl+Shift+R (Chrome) ou Ctrl+Shift+Delete</li>
            <li><strong>V√©rifier la console</strong> : Copier tous les messages d'erreur</li>
            <li><strong>Tester en navigation priv√©e</strong> : √âliminer les donn√©es corrompues</li>
            <li><strong>Red√©marrer le serveur</strong> : npm run dev</li>
        </ul>
    </div>

    <div class="step success">
        <h3>‚úÖ R√©sultat Attendu</h3>
        <ul>
            <li>Pas de page de chargement infini au d√©marrage</li>
            <li>Session persistante lors du changement d'onglet</li>
            <li>Messages "Multiple GoTrueClient" r√©duits (acceptable au premier chargement)</li>
            <li>Application stable et responsive</li>
        </ul>
    </div>

    <script>
        // Automatiser quelques v√©rifications
        console.log('üîç Test Page - V√©rifications automatiques:');
        console.log('- Singleton Supabase:', !!window.__effizen_supabase_client__);
        console.log('- LocalStorage session:', !!localStorage.getItem('supabase.auth.token.local.3000'));
        console.log('- SessionStorage cache:', !!sessionStorage.getItem('effizen_auth_cache'));
        
        // Fonction pour tester la visibilit√©
        window.testVisibilityChange = function() {
            console.log('üß™ Test visibilityChange manuel...');
            document.dispatchEvent(new Event('visibilitychange'));
            console.log('‚úì √âv√©nement visibilitychange d√©clench√©');
        };
        
        console.log('üí° Utilisez testVisibilityChange() pour tester manuellement');
    </script>
</body>
</html>`;

  fs.writeFileSync('./test-manual-page.html', testPageContent);
  console.log(`\n  ${colors.cyan}üìÑ Page de test cr√©√©e: ./test-manual-page.html${colors.reset}`);
}

// Test principal
async function runFinalTest() {
  console.log(`${colors.bright}${colors.blue}==========================================`);
  console.log(`TEST FINAL: Correction Bug Changement d'Onglet`);
  console.log(`==========================================\n${colors.reset}`);

  const results = {
    server: false,
    fixes: false,
    build: false,
    persistence: false
  };

  // Test 1: Serveur
  console.log(`${colors.yellow}Test 1: Serveur de d√©veloppement${colors.reset}`);
  results.server = await checkLocalhost();
  
  if (results.server) {
    console.log(`${colors.green}‚úì Serveur accessible${colors.reset}`);
  } else {
    console.log(`${colors.red}‚úó Serveur inaccessible${colors.reset}`);
    console.log(`${colors.yellow}  Lancez: npm run dev${colors.reset}`);
  }

  // Test 2: V√©rification des corrections
  results.fixes = await verifyFixes();

  // Test 3: Build (si les fixes sont OK)
  if (results.fixes) {
    results.build = await testBuild();
  }

  // Test 4: Persistance (si serveur OK)
  if (results.server) {
    results.persistence = await testSessionPersistence();
  }

  // Cr√©er page de test manuel
  await createManualTestPage();

  // R√©sum√© final
  console.log(`\n${colors.bright}${colors.cyan}==========================================`);
  console.log(`R√âSUM√â FINAL`);
  console.log(`==========================================\n${colors.reset}`);

  const statusChar = (status) => status ? `${colors.green}‚úì` : `${colors.red}‚úó`;
  
  console.log(`Serveur:       ${statusChar(results.server)}${colors.reset}`);
  console.log(`Corrections:   ${statusChar(results.fixes)}${colors.reset}`);
  console.log(`Build:         ${statusChar(results.build)}${colors.reset}`);
  console.log(`Persistance:   ${statusChar(results.persistence)}${colors.reset}`);

  const allCritical = results.server && results.fixes;
  
  if (allCritical) {
    console.log(`\n${colors.bright}${colors.green}üéâ CORRECTIONS APPLIQU√âES AVEC SUCC√àS !${colors.reset}`);
    console.log(`\n${colors.magenta}‚ûú Test Manuel Requis:${colors.reset}`);
    console.log(`  1. Ouvrez: ${colors.bright}http://localhost:3000${colors.reset}`);
    console.log(`  2. Consultez: ${colors.bright}./test-manual-page.html${colors.reset}`);
    console.log(`  3. Suivez la proc√©dure de test d√©taill√©e`);
    
    if (!results.server) {
      console.log(`\n${colors.yellow}‚ö†Ô∏è Serveur non d√©tect√©, lancez: npm run dev${colors.reset}`);
    }
  } else {
    console.log(`\n${colors.bright}${colors.red}‚ùå CORRECTIONS INCOMPL√àTES${colors.reset}`);
    console.log(`${colors.yellow}V√©rifiez les erreurs ci-dessus.${colors.reset}`);
  }
  
  return allCritical;
}

// Ex√©cution
runFinalTest()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error(`${colors.red}Erreur fatale:`, error);
    process.exit(1);
  });