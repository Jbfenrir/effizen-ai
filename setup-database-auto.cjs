const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase depuis votre .env
const supabaseUrl = 'https://qzvrkcmwzdaffpknuozl.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF6dnJrY213emRhZmZwa251b3psIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIyMTM3OTgsImV4cCI6MjA2Nzc4OTc5OH0.GJXkGBy047Dx8cS-uOIQJSEJa5VHQRfdwWb-FkQVbIQ';

// Pour ex√©cuter du SQL, nous avons besoin de la cl√© service (plus de privil√®ges)
// Malheureusement, avec seulement la cl√© anon, nous sommes limit√©s
const supabase = createClient(supabaseUrl, supabaseKey);

async function setupDatabase() {
  console.log('üöÄ Configuration automatique de la base de donn√©es...\n');

  try {
    // Test 1: V√©rifier la connexion
    console.log('1Ô∏è‚É£  V√©rification de la connexion √† Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (testError && testError.code === '42P01') {
      console.log('‚ùå Table "profiles" n\'existe pas');
      console.log('   Les tables doivent √™tre cr√©√©es manuellement dans Supabase\n');
      
      // Cr√©ons au moins les donn√©es de test via l'API REST
      console.log('2Ô∏è‚É£  Tentative de cr√©ation via l\'API REST...');
      
      // Essayer de cr√©er une √©quipe de test
      console.log('   Cr√©ation d\'une √©quipe de test...');
      const { data: teamData, error: teamError } = await supabase
        .from('teams')
        .insert([
          {
            name: '√âquipe Test Auto',
            description: '√âquipe cr√©√©e automatiquement par le script',
            is_active: true
          }
        ])
        .select();
      
      if (teamError) {
        console.log('   ‚ùå Impossible de cr√©er l\'√©quipe:', teamError.message);
      } else {
        console.log('   ‚úÖ √âquipe cr√©√©e:', teamData);
      }
    } else if (testError) {
      console.log('‚ùå Erreur de connexion:', testError.message);
    } else {
      console.log('‚úÖ Connexion r√©ussie\n');
      
      // Test 2: V√©rifier les tables existantes
      console.log('2Ô∏è‚É£  V√©rification des tables existantes...');
      
      const tables = ['profiles', 'teams', 'daily_entries', 'team_stats'];
      const tableStatus = {};
      
      for (const table of tables) {
        const { error } = await supabase
          .from(table)
          .select('count')
          .limit(1);
        
        if (error && error.code === '42P01') {
          tableStatus[table] = '‚ùå N\'existe pas';
        } else if (error) {
          tableStatus[table] = `‚ö†Ô∏è  Erreur: ${error.message}`;
        } else {
          tableStatus[table] = '‚úÖ Existe';
        }
        
        console.log(`   ${table}: ${tableStatus[table]}`);
      }
      
      // Test 3: V√©rifier/Cr√©er le profil admin
      console.log('\n3Ô∏è‚É£  V√©rification du profil admin...');
      
      // R√©cup√©rer l'utilisateur actuel
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (user) {
        console.log('   Utilisateur connect√©:', user.email);
        
        // V√©rifier si le profil existe
        const { data: profileData, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();
        
        if (profileError && profileError.code === 'PGRST116') {
          console.log('   Profil n\'existe pas, cr√©ation...');
          
          const { data: newProfile, error: createError } = await supabase
            .from('profiles')
            .insert([
              {
                id: user.id,
                email: user.email,
                role: 'admin',
                is_active: true
              }
            ])
            .select();
          
          if (createError) {
            console.log('   ‚ùå Erreur cr√©ation profil:', createError.message);
          } else {
            console.log('   ‚úÖ Profil admin cr√©√©');
          }
        } else if (profileData) {
          console.log('   ‚úÖ Profil existe d√©j√†:', profileData.role);
        }
      } else {
        console.log('   ‚ö†Ô∏è  Pas d\'utilisateur connect√©');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }

  console.log('\n========================================');
  console.log('üìã R√âSUM√â');
  console.log('========================================\n');
  
  console.log('‚ö†Ô∏è  LIMITATION D√âTECT√âE:');
  console.log('   Avec la cl√© API publique (anon), nous ne pouvons pas cr√©er les tables.');
  console.log('   Les tables doivent √™tre cr√©√©es manuellement dans Supabase.\n');
  
  console.log('üéØ ACTION REQUISE:');
  console.log('   1. Ouvrez: https://supabase.com/dashboard');
  console.log('   2. Allez dans SQL Editor');
  console.log('   3. Copiez le contenu de fix-database-tables.sql');
  console.log('   4. Ex√©cutez le script\n');
  
  console.log('üí° ALTERNATIVE:');
  console.log('   Si vous me donnez la cl√© SERVICE de Supabase (trouvable dans');
  console.log('   Project Settings > API), je pourrai cr√©er les tables automatiquement.');
  console.log('   ‚ö†Ô∏è  ATTENTION: Ne partagez JAMAIS cette cl√© publiquement!\n');
}

// Ex√©cuter le script
setupDatabase().catch(console.error);